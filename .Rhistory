outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome == "pneumonia") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia"
}
data <- data[state == funcState]
data <- data[c("Hospital.Name", "State", outcomeCol)]
## data[,outcomeCol] <- data[, as.numeric(data[,outcomeCol])]
data <- data[complete.cases(data),]
data <- data[order(get(data[,outcomeCol]), "Hospital.Name"),]
data[, "Hospital.Name"][1]
}
best("TX", "heart attack")
best <- function(state, outcome) {
funcState <- state
data <- read.csv("outcome-of-care-measures.csv")
outcomeCol <- ""
if(outcome == "heart attack") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome == "heart failure") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome == "pneumonia") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia"
}
data <- data[state == funcState]
data <- data[c("Hospital.Name", "State", outcomeCol)]
name(data)
## data[,outcomeCol] <- data[, as.numeric(data[,outcomeCol])]
## data <- data[complete.cases(data),]
##data <- data[order(get(data[,outcomeCol]), "Hospital.Name"),]
##data[, "Hospital.Name"][1]
}
best("TX", "heart attack")
best <- function(state, outcome) {
funcState <- state
data <- read.csv("outcome-of-care-measures.csv")
outcomeCol <- ""
if(outcome == "heart attack") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome == "heart failure") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome == "pneumonia") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia"
}
data <- data[state == funcState]
data <- data[c("Hospital.Name", "State", outcomeCol)]
names(data)
## data[,outcomeCol] <- data[, as.numeric(data[,outcomeCol])]
## data <- data[complete.cases(data),]
##data <- data[order(get(data[,outcomeCol]), "Hospital.Name"),]
##data[, "Hospital.Name"][1]
}
best("TX", "heart attack")
best <- function(state, outcome) {
funcState <- state
data <- read.csv("outcome-of-care-measures.csv")
outcomeCol <- ""
if(outcome == "heart attack") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome == "heart failure") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome == "pneumonia") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia"
}
data <- data[state == funcState]
data <- data[c("Hospital.Name", "State", outcomeCol)]
ncols(data)
## data[,outcomeCol] <- data[, as.numeric(data[,outcomeCol])]
## data <- data[complete.cases(data),]
##data <- data[order(get(data[,outcomeCol]), "Hospital.Name"),]
##data[, "Hospital.Name"][1]
}
best("TX", "heart attack")
best <- function(state, outcome) {
funcState <- state
data <- read.csv("outcome-of-care-measures.csv")
outcomeCol <- ""
if(outcome == "heart attack") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome == "heart failure") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome == "pneumonia") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia"
}
data <- data[state == funcState]
data <- data[c("Hospital.Name", "State", outcomeCol)]
ncol(data)
## data[,outcomeCol] <- data[, as.numeric(data[,outcomeCol])]
## data <- data[complete.cases(data),]
##data <- data[order(get(data[,outcomeCol]), "Hospital.Name"),]
##data[, "Hospital.Name"][1]
}
best("TX", "heart attack")
best <- function(state, outcome) {
funcState <- state
data <- read.csv("outcome-of-care-measures.csv")
outcomeCol <- ""
if(outcome == "heart attack") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome == "heart failure") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome == "pneumonia") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia"
}
data <- data[state == funcState]
data <- data[c("Hospital.Name", "State", outcomeCol)]
data[,outcomeCol] <- data[, as.numeric(data[,outcomeCol])]
## data <- data[complete.cases(data),]
##data <- data[order(get(data[,outcomeCol]), "Hospital.Name"),]
##data[, "Hospital.Name"][1]
}
best("TX", "heart attack")
best <- function(state, outcome) {
funcState <- state
data <- read.csv("outcome-of-care-measures.csv")
outcomeCol <- ""
if(outcome == "heart attack") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome == "heart failure") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome == "pneumonia") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia"
}
data <- data[state == funcState]
data <- data[c("Hospital.Name", "State", outcomeCol)]
data[, outcomeCol]
##data[,outcomeCol] <- data[, as.numeric(data[,outcomeCol])]
## data <- data[complete.cases(data),]
##data <- data[order(get(data[,outcomeCol]), "Hospital.Name"),]
##data[, "Hospital.Name"][1]
}
best("TX", "heart attack")
source('D:/harsh/Projects/R/Project3.R', echo=TRUE)
best <- function(state, outcome) {
funcState <- state
data <- read.csv("outcome-of-care-measures.csv")
outcomeCol <- ""
if(outcome == "heart attack") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome == "heart failure") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome == "pneumonia") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia"
}
data <- data[state == funcState]
data <- data[c("Hospital.Name", "State", outcomeCol)]
data[,outcomeCol] <- data[, as.numeric(c(data[,outcomeCol]))]
## data <- data[complete.cases(data),]
##data <- data[order(get(data[,outcomeCol]), "Hospital.Name"),]
##data[, "Hospital.Name"][1]
}
best("TX", "heart attack")
best <- function(state, outcome) {
funcState <- state
data <- read.csv("outcome-of-care-measures.csv")
outcomeCol <- ""
if(outcome == "heart attack") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome == "heart failure") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome == "pneumonia") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia"
}
data <- data[state == funcState]
data <- data[c("Hospital.Name", "State", outcomeCol)]
data <- data[complete.cases(data),]
##data <- data[order(get(data[,outcomeCol]), "Hospital.Name"),]
##data[, "Hospital.Name"][1]
}
best("TX", "heart attack")
best <- function(state, outcome) {
funcState <- state
data <- read.csv("outcome-of-care-measures.csv")
outcomeCol <- ""
if(outcome == "heart attack") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome == "heart failure") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome == "pneumonia") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia"
}
data <- data[state == funcState]
data <- data[c("Hospital.Name", "State", outcomeCol)]
data <- data[complete.cases(data),]
data <- data[order(get(data[,outcomeCol]), "Hospital.Name"),]
##data[, "Hospital.Name"][1]
}
best("TX", "heart attack")
best <- function(state, outcome) {
funcState <- state
data <- read.csv("outcome-of-care-measures.csv")
outcomeCol <- ""
if(outcome == "heart attack") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome == "heart failure") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome == "pneumonia") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia"
}
data <- data[state == funcState]
data <- data[c("Hospital.Name", "State", outcomeCol)]
data <- data[complete.cases(data),]
vals <- data[, outcomeCol]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$Hospital.Name
}
best("TX", "heart attack")
best <- function(state, outcome) {
funcState <- state
data <- read.csv("outcome-of-care-measures.csv")
outcomeCol <- ""
if(outcome == "heart attack") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome == "heart failure") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome == "pneumonia") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia"
}
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcomeCol]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$Hospital.Name
}
best("TX", "heart attack")
best <- function(state, outcome) {
funcState <- state
data <- read.csv("outcome-of-care-measures.csv")
outcomeCol <- ""
if(outcome == "heart attack") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
} else if(outcome == "heart failure") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
} else if(outcome == "pneumonia") {
outcomeCol <- "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Pneumonia"
}
data <- data[data$state==state & data[outcomeCol] != 'Not Available', ]
vals <- data[, outcomeCol]
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$Hospital.Name
}
best("TX", "heart attack")
best <- function(state, outcome) {
## All of the possible outcome strings
outcomes = c("heart attack", "heart failure", "pneumonia")
## Check if outcome is one of the strings in outcomes
## %in% is a more intuitive interface as a binary operator, which returns a logical vector indicating if there is a match or not
if( outcome %in% outcomes == FALSE ) {
stop("invalid outcome")
}
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Get the columns below from 'data' and place it in 'data' with new names ("name", "state", "heart attack", etc)
#"Hospital.Name"
#"State"
#"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
#"Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"
#"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Get a vector of all of the states in 'data' now at column 2, NOTE: could've also used data["state"]
states <- data[, 2]
states <- unique(states)
if( state %in% states == FALSE ) {
stop("invalid state")
}
## Get only the rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
vals <- data[, outcome]
## RowNum = the index of the minimum value
rowNum <- which.min(vals)
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
best("TX", "heart attack")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital <- function(state, outcome, num) {
## Read outcome data .csv file
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## All of the possible outcome strings
outcomes = c("heart attack", "heart failure", "pneumonia")
## Check if outcome is one of the strings in outcomes
if( outcome %in% outcomes == FALSE ) {
stop("invalid outcome")
}
## Validate the state string
## All of the possible states from the data
states <- data[, 2]
states <- unique(states)
## Check if state is one of the states in the data
if( state %in% states == FALSE ) {
stop("invalid state")
}
## Validate the num value by checking if it is "best","worst", or a number.
## NOTE: If num was Boolean then num%%1 = 0
if( num != "best" && num != "worst" && num%%1 != 0 ) {
stop("invalid num")
}
## Get only the rows with our state value
data <- data[data$state==state & data[outcome] != 'Not Available', ]
## Order the data by name and then outcome
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
## Process the num argument to get the row index
vals <- data[, outcome]
if( num == "best" ) {
rowNum <- which.min(vals)
} else if( num == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- num
}
## Return hospital name in that state with lowest 30-day death rate
data[rowNum, ]$name
}
rankhospital("NC", "heart attack", "worst")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
data <- data[c(2, 7, 11, 17, 23)]
names(data)[1] <- "name"
names(data)[2] <- "state"
names(data)[3] <- "heart attack"
names(data)[4] <- "heart failure"
names(data)[5] <- "pneumonia"
## Validate the outcome string
outcomes = c("heart attack", "heart failure", "pneumonia")
if( outcome %in% outcomes == FALSE ) stop("invalid outcome")
## Validate the num value
if( num != "best" && num != "worst" && num%%1 != 0 ) stop("invalid num")
## Grab only rows with data in our outcome
data <- data[data[outcome] != 'Not Available', ]
## Order the data
data[outcome] <- as.data.frame(sapply(data[outcome], as.numeric))
data <- data[order(data$name, decreasing = FALSE), ]
data <- data[order(data[outcome], decreasing = FALSE), ]
## Helper functiont to process the num argument
getHospByRank <- function(df, s, n) {
df <- df[df$state==s, ]
vals <- df[, outcome]
if( n == "best" ) {
rowNum <- which.min(vals)
} else if( n == "worst" ) {
rowNum <- which.max(vals)
} else {
rowNum <- n
}
df[rowNum, ]$name
}
## For each state, find the hospital of the given rank
states <- data[, 2]
states <- unique(states)
newdata <- data.frame("hospital"=character(), "state"=character())
for(st in states) {
hosp <- getHospByRank(data, st, num)
newdata <- rbind(newdata, data.frame(hospital=hosp, state=st))
}
## Return a data frame with the hospital names and the (abbreviated) state name
newdata <- newdata[order(newdata['state'], decreasing = FALSE), ]
newdata
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
geted()
getwd()
library(data.table)
path <- getwd()
# Get Activity Labels and Features
activity_labels <- fread(file.path(path, "activity_labels.txt"), col.names = c("classLabels", "activity"))
features <- fread(file.path(path, "features.txt"), col.names = c("index", "featureName"))
# Extracting mean and std (standard deviation) from features table
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureName])
measurements <- features[featuresWanted, featureName]
measurements <- gsub('[()]', '', measurements)
# Load train datasets
train <- fread(file.path(path, "HAR Assignment/train/X_train.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(train, colnames(train), measurements)
trainActivities <- fread(file.path(path, "HAR Assignment/train/Y_train.txt")
, col.names = c("Activity"))
trainSubjects <- fread(file.path(path, "HAR Assignment/train/subject_train.txt")
, col.names = c("SubjectNum"))
train <- cbind(trainSubjects, trainActivities, train)
# Load test datasets
test <- fread(file.path(path, "HAR Assignment/test/X_test.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(test, colnames(test), measurements)
testActivities <- fread(file.path(path, "HAR Assignment/test/Y_test.txt")
, col.names = c("Activity"))
testSubjects <- fread(file.path(path, "HAR Assignment/test/subject_test.txt")
, col.names = c("SubjectNum"))
test <- cbind(testSubjects, testActivities, test)
# merge datasets
combined <- rbind(train, test)
# Convert classLabels to activityName basically. More explicit.
combined[["Activity"]] <- factor(combined[, Activity]
, levels = activityLabels[["classLabels"]]
, labels = activityLabels[["activityName"]])
combined[["SubjectNum"]] <- as.factor(combined[, SubjectNum])
data.table::fwrite(x = combined, file = "tidyData.txt", quote = FALSE)
library(data.table)
path <- getwd()
# Get Activity Labels and Features
activity_labels <- fread(file.path(path, "activity_labels.txt"), col.names = c("classLabels", "activity"))
features <- fread(file.path(path, "features.txt"), col.names = c("index", "featureName"))
# Extracting mean and std (standard deviation) from features table
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureName])
measurements <- features[featuresWanted, featureName]
measurements <- gsub('[()]', '', measurements)
# Load train datasets
train <- fread(file.path(path, "HAR Assignment/train/X_train.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(train, colnames(train), measurements)
trainActivities <- fread(file.path(path, "HAR Assignment/train/y_train.txt")
, col.names = c("Activity"))
trainSubjects <- fread(file.path(path, "HAR Assignment/train/subject_train.txt")
, col.names = c("SubjectNum"))
train <- cbind(trainSubjects, trainActivities, train)
# Load test datasets
test <- fread(file.path(path, "HAR Assignment/test/X_test.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(test, colnames(test), measurements)
testActivities <- fread(file.path(path, "HAR Assignment/test/y_test.txt")
, col.names = c("Activity"))
testSubjects <- fread(file.path(path, "HAR Assignment/test/subject_test.txt")
, col.names = c("SubjectNum"))
test <- cbind(testSubjects, testActivities, test)
# merge datasets
combined <- rbind(train, test)
# Convert classLabels to activityName basically. More explicit.
combined[["Activity"]] <- factor(combined[, Activity]
, levels = activityLabels[["classLabels"]]
, labels = activityLabels[["activityName"]])
combined[["SubjectNum"]] <- as.factor(combined[, SubjectNum])
data.table::fwrite(x = combined, file = "tidyData.txt", quote = FALSE)
path <- getwd()
activity_labels <- fread(file.path(path, "activity_labels.txt"), col.names = c("classLabels", "activity"))
features <- fread(file.path(path, "features.txt"), col.names = c("index", "featureName"))
# Extracting mean and std (standard deviation) from features table
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureName])
measurements <- features[featuresWanted, featureName]
measurements <- gsub('[()]', '', measurements)
setwd("")
setwd("D:\harsh\Projects\R\HAR Assignment")
setwd("D:/harsh/Projects/R/HAR Assignment")
path <- getwd()
activity_labels <- fread(file.path(path, "activity_labels.txt"), col.names = c("classLabels", "activity"))
features <- fread(file.path(path, "features.txt"), col.names = c("index", "featureName"))
# Extracting mean and std (standard deviation) from features table
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureName])
measurements <- features[featuresWanted, featureName]
measurements <- gsub('[()]', '', measurements)
library(data.table)
path <- getwd()
activity_labels <- fread(file.path(path, "activity_labels.txt"), col.names = c("classLabels", "activity"))
features <- fread(file.path(path, "features.txt"), col.names = c("index", "featureName"))
featuresWanted <- grep("(mean|std)\\(\\)", features[, featureName])
measurements <- features[featuresWanted, featureName]
measurements <- gsub('[()]', '', measurements)
train <- fread(file.path(path, "HAR Assignment/train/X_train.txt"))[, featuresWanted, with = FALSE]
train <- fread(file.path(path, "train/X_train.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(train, colnames(train), measurements)
trainActivities <- fread(file.path(path, "train/y_train.txt")
, col.names = c("Activity"))
trainSubjects <- fread(file.path(path, "train/subject_train.txt")
, col.names = c("SubjectNum"))
train <- cbind(trainSubjects, trainActivities, train)
test <- fread(file.path(path, "test/X_test.txt"))[, featuresWanted, with = FALSE]
data.table::setnames(test, colnames(test), measurements)
testActivities <- fread(file.path(path, "test/y_test.txt")
, col.names = c("Activity"))
testSubjects <- fread(file.path(path, "test/subject_test.txt")
, col.names = c("SubjectNum"))
test <- cbind(testSubjects, testActivities, test)
combined <- rbind(train, test)
combined[["Activity"]] <- factor(combined[, Activity]
, levels = activityLabels[["classLabels"]]
, labels = activityLabels[["activityName"]])
combined[["SubjectNum"]] <- as.factor(combined[, SubjectNum])
data.table::fwrite(x = combined, file = "tidyData.txt", quote = FALSE)
combined[["Activity"]] <- factor(combined[, Activity]
, levels = activityLabels[["classLabels"]]
, labels = activityLabels[["activity"]])
combined[["Activity"]] <- factor(combined[, Activity]
, levels = activity[["classLabels"]]
, labels = activity[["activity"]])
View(combined)
combined[["Activity"]] <- factor(combined[, Activity]
, levels = activity_labels[["classLabels"]]
, labels = activity_labels[["activity"]])
combined[["SubjectNum"]] <- as.factor(combined[, SubjectNum])
data.table::fwrite(x = combined, file = "tidyData.txt", quote = FALSE)
